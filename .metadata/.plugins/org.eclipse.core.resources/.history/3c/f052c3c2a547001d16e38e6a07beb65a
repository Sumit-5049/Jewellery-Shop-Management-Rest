package com.authorizationservice.authorization.controller;
import org.springframework.http.MediaType;
import com.authorizationservice.authorization.dto.VaildatingDTO;
import com.authorizationservice.authorization.exceptions.LoginException;

import com.authorizationservice.authorization.util.JwtUtil;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RestController;

@RestController

public class AuthorizationController {

    @Autowired
    private AppUserDetailsService userDetailsService;
    @Autowired
	private JwtUtil jwtTokenUtil;
    
	private VaildatingDTO vaildatingDTO= new VaildatingDTO();

  // here iam validating the token to issue certain functionalities
	// u will no of rest methods
	// some user stores u apply u leave an impression
	
    @GetMapping("getemps")
	public ResponseEntity<String> getEmpDetails(@RequestHeader(name = "Authorization" ) String tokenDup) {
    	String token = tokenDup.substring(7);
		try {
	UserDetails user = userDetailsService.loadUserByUsername(jwtTokenUtil.extractUsername(token));
	if (jwtTokenUtil.validateToken(token, user)) {
		
		// here u r code goes 
		
  		return new ResponseEntity<>("Got All the Emps", HttpStatus.OK);
	} else {
		
		return new ResponseEntity<>("Sorry Emps not found", HttpStatus.FORBIDDEN);
	}
} catch (Exception e) { 
	
	
	return new ResponseEntity<>("Some Error", HttpStatus.FORBIDDEN);
}

    	
    	
	}
	
	
		
	@PostMapping("/login")
	public ResponseEntity<?> createAuthorizationToken(@RequestBody AuthenticationRequest authenticationRequest) throws LoginException { 
		final UserDetails userDetails = userDetailsService.loadUserByUsername(authenticationRequest.getUserName());
		if (userDetails.getPassword().equals(authenticationRequest.getPassword())) {
			return new ResponseEntity<>(
					new AuthenticationResponse("sam", jwtTokenUtil.generateToken(userDetails)),HttpStatus.OK);
		} else {
			throw new LoginException("Invalid Username or Password");
		}
	}

	

	@GetMapping( path = "/validate")
	public ResponseEntity<VaildatingDTO> validatingAuthorizationToken(@RequestHeader(name = "Authorization" ) String tokenDup) {
		String token = tokenDup.substring(7);
				try {
			UserDetails user = userDetailsService.loadUserByUsername(jwtTokenUtil.extractUsername(token));
			if (jwtTokenUtil.validateToken(token, user)) {
				vaildatingDTO.setValidStatus(true);
				return new ResponseEntity<>(vaildatingDTO, HttpStatus.OK);
			} else {
				vaildatingDTO.setValidStatus(false);
				return new ResponseEntity<>(vaildatingDTO, HttpStatus.FORBIDDEN);
			}
		} catch (Exception e) { 
			
			vaildatingDTO.setValidStatus(false);
			return new ResponseEntity<>(vaildatingDTO, HttpStatus.FORBIDDEN);
		}
	}

	
}
