package com.virtusa.jsm.controller;

import java.util.List;

import javax.security.auth.login.LoginException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.virtusa.jsm.dto.AuthenticationRequest;
import com.virtusa.jsm.dto.AuthenticationResponse;
import com.virtusa.jsm.dto.Customer;
import com.virtusa.jsm.dto.Shop;
import com.virtusa.jsm.dto.UserInfo;
import com.virtusa.jsm.dto.VaildatingDTO;
import com.virtusa.jsm.exception.DataNotFoundException;
import com.virtusa.jsm.exception.InvalidCredentialException;
import com.virtusa.jsm.service.ShopService;
import com.virtusa.jsm.util.JwtUtil;

@RestController
@RequestMapping("/shop")
public class ShopController {
	@Autowired
	ShopService service;
	////////////
//	 @Autowired
//	    private AppUserDetailsService userDetailsService;
	    @Autowired
		JwtUtil jwtTokenUtil;
	    
		private VaildatingDTO vaildatingDTO= new VaildatingDTO();

	  // here iam validating the token to issue certain functionalities
		// u will no of rest methods
		// some user stores u apply u leave an impression
		
//	    @GetMapping("getemps")
//		public ResponseEntity<String> getEmpDetails(@RequestHeader(name = "Authorization" ) String tokenDup) {
//	    	String token = tokenDup.substring(7);
//			try {
//		UserDetails user = userDetailsService.loadUserByUsername(jwtTokenUtil.extractUsername(token));
//		if (jwtTokenUtil.validateToken(token, user)) {
//			
//			// here u r code goes 
//			
//	  		return new ResponseEntity<>("Got All the Emps", HttpStatus.OK);
//		} else {
//			
//			return new ResponseEntity<>("Sorry Emps not found", HttpStatus.FORBIDDEN);
//		}
//	} catch (Exception e) { 
//		
//		
//		return new ResponseEntity<>("Some Error", HttpStatus.FORBIDDEN);
//	}
//
//	    	
//	    	
//		}
//		
		
			
//		@PostMapping("/login")
//		public ResponseEntity<?> createAuthorizationToken(@RequestBody AuthenticationRequest authenticationRequest) throws LoginException { 
//			final UserDetails userDetails = userDetailsService.loadUserByUsername(authenticationRequest.getUserName());
//			if (userDetails.getPassword().equals(authenticationRequest.getPassword())) {
//				return new ResponseEntity<>(
//						new AuthenticationResponse("sam", jwtTokenUtil.generateToken(userDetails)),HttpStatus.OK);
//			} else {
//				throw new LoginException("Invalid Username or Password");
//			}
//		}

		

		@GetMapping( path = "/validate")
		public ResponseEntity<VaildatingDTO> validatingAuthorizationToken(@RequestHeader(name = "Authorization" ) String tokenDup) {
			String token = tokenDup.substring(7);
					try {
				UserDetails user = service.getShopByEmail(jwtTokenUtil.extractUsername(token));
				if (jwtTokenUtil.validateToken(token, user)) {
					vaildatingDTO.setValidStatus(true);
					return new ResponseEntity<>(vaildatingDTO, HttpStatus.OK);
				} else {
					vaildatingDTO.setValidStatus(false);
					return new ResponseEntity<>(vaildatingDTO, HttpStatus.FORBIDDEN);
				}
			} catch (Exception e) { 
				
				vaildatingDTO.setValidStatus(false);
				return new ResponseEntity<>(vaildatingDTO, HttpStatus.FORBIDDEN);
			}
		}

		
	
	
	
	//////////
	
	@GetMapping("/all")
	public List<?> getall(){
		return service.findAll();
	}
	
	@PostMapping("/login")
	public ResponseEntity<?> loginShop(@RequestBody AuthenticationRequest req) throws InvalidCredentialException, DataNotFoundException, LoginException {
		
		 UserDetails userDetails=service.login(req);
		if(userDetails!=null) {
		return  new ResponseEntity<>(
				new AuthenticationResponse(req.getEmail(), jwtTokenUtil.generateToken(userDetails)),HttpStatus.OK);
				
		}else {
			throw new LoginException("Invalid Username or Password");
		}
	
	}
//	@GetMapping("/login/{p1}/{p2}")
//	public Shop loginShop(@PathVariable("p1") String email,@PathVariable("p2") String pass) throws InvalidCredentialException, DataNotFoundException {
//		return service.login(email, pass);
//	}
}
